eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIGRvY2tlci1idWlsZC1kYi1pbWFnZToKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtdCBwdHRnLXBvc3RncmVzIC1mIERvY2tlcmZpbGUgLgogICAgd2hlbjoKICAgICAgYnJhbmNoOiBbbWFzdGVyLCByZWZzL3RhZ3MvKl0KICAgICAgZXZlbnQ6IFtwdXNoLCB0YWddCgogIHRhZy1kYi1pbWFnZToKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtwdHRnIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgcHR0Zy1wb3N0Z3JlcyBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcHR0Zy1wb3N0Z3JlczpsYXRlc3QKICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcHR0Zy1wb3N0Z3JlczpsYXRlc3QKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCiAgICAgIAogICAgICAKICAgdGFnLWxhdGVzdC1kb2NrZXItaW1hZ2U6CiAgICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgICBlbnZpcm9ubWVudDoKICAgICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICAgIGNvbW1hbmRzOgogICAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK3B0dGciIC1wPSR7RE9DS0VSX1BBU1NXT1JEfSBxdWF5LmlvCiAgICAgICAgLSBkb2NrZXIgdGFnIHB0dGctcG9zdGdyZXMgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3B0dGctcG9zdGdyZXM6bGF0ZXN0CiAgICAgICAgLSBkb2NrZXIgdGFnIHB0dGctcG9zdGdyZXMgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3B0dGctcG9zdGdyZXM6YnVpbGQtJHtEUk9ORV9CVUlMRF9OVU1CRVJ9CiAgICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcHR0Zy1wb3N0Z3JlczpsYXRlc3QKICAgICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9wdHRnLXBvc3RncmVzOmJ1aWxkLSR7RFJPTkVfQlVJTERfTlVNQkVSfQogICAgICB3aGVuOgogICAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgICAgZXZlbnQ6IHB1c2gKICAKICB0YWctZG9ja2VyLWltYWdlLXdpdGgtZ2l0LXRhZzoKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtwdHRnIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgcHR0Zy1wb3N0Z3JlcyBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcHR0Zy1wb3N0Z3Jlczoke0RST05FX1RBR30KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcHR0Zy1wb3N0Z3Jlczoke0RST05FX1RBR30KICAgIHdoZW46CiAgICAgIGV2ZW50OiB0YWcKCiAgZ2V0LWt1YmUtY29uZmlndXJhdGlvbjoKICAgIGltYWdlOiBwbHVnaW5zL2dpdAogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vVUtIb21lT2ZmaWNlL2t1YmUtcHR0Zy1wb3N0Z3Jlcy5naXQKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgdGFnLCBkZXBsb3ltZW50XQoKICBkZXBsb3ktdG8tZGV2LWZyb20tYnVpbGQtbnVtYmVyOgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZDp2MC4yLjIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICAgIC0gS1VCRV9OQU1FU1BBQ0U9cHQtaS1kZXYKICAgICAgLSBFTlZJUk9OTUVOVD1kZXYKICAgICAgLSBWRVJTSU9OPWJ1aWxkLSR7RFJPTkVfQlVJTERfTlVNQkVSfQogICAgICAtIEtVQkVfU0VSVkVSPWh0dHBzOi8va3ViZS1kZXYuZHNwLm5vdHByb2QuaG9tZW9mZmljZS5nb3YudWsKICAgIGNvbW1hbmRzOgogICAgICAtIGNkIGt1YmUtcHR0Zy1wb3N0Z3JlcwogICAgICAtIC4vZGVwbG95LnNoCiAgICB3aGVuOgogICAgICBicmFuY2g6IFttYXN0ZXJdCiAgICAgIGV2ZW50OiBbcHVzaCwgdGFnXQoKICBkZXBsb3ktdG8tcHJlcHJvZC1mcm9tLWJ1aWxkLXRhZzoKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4yCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgICAtIEtVQkVfTkFNRVNQQUNFPXB0LWktcHJlcHJvZAogICAgICAtIEVOVklST05NRU5UPXByZXByb2QKICAgICAgLSBWRVJTSU9OPSR7RFJPTkVfVEFHfQogICAgICAtIEtVQkVfU0VSVkVSPWh0dHBzOi8va3ViZS1kZXYuZHNwLm5vdHByb2QuaG9tZW9mZmljZS5nb3YudWsKICAgIGNvbW1hbmRzOgogICAgICAtIGNkIGt1YmUtcHR0Zy1wb3N0Z3JlcwogICAgICAtIC4vZGVwbG95LnNoCiAgICB3aGVuOgogICAgICBldmVudDogW3RhZ10KCiAgZGVwbG95OgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZDp2MC4yLjIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICAgIC0gS1VCRV9OQU1FU1BBQ0U9cHQtaS0ke0RST05FX0RFUExPWV9UT30KICAgICAgLSBFTlZJUk9OTUVOVD0ke0RST05FX0RFUExPWV9UT30KICAgICAgLSBWRVJTSU9OPSR7SU1BR0VfVkVSU0lPTn0KICAgICAgLSBLVUJFX1NFUlZFUj1odHRwczovL2t1YmUtZGV2LmRzcC5ub3Rwcm9kLmhvbWVvZmZpY2UuZ292LnVrCiAgICBjb21tYW5kczoKICAgICAgLSBjZCBrdWJlLXB0dGctcG9zdGdyZXMKICAgICAgLSAuL2RlcGxveS5zaAogICAgd2hlbjoKICAgICAgZXZlbnQ6IGRlcGxveW1lbnQKICAgICAgZW52aXJvbm1lbnQ6IFtkZXYsIHRlc3QsIHByZXByb2RdCgogIGRlcGxveS10by1wcm9kOgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZDp2MC4yLjIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICAgIC0gS1VCRV9OQU1FU1BBQ0U9cHQtaS1wcm9kCiAgICAgIC0gS1VCRV9UT0tFTj0ke1BST0RfS1VCRV9UT0tFTn0KICAgICAgLSBFTlZJUk9OTUVOVD1wcm9kCiAgICAgIC0gVkVSU0lPTj0ke0lNQUdFX1ZFUlNJT059CiAgICAgIC0gS1VCRV9TRVJWRVI9aHR0cHM6Ly9rdWJlLmRzcC5kaWdpdGFsLmhvbWVvZmZpY2UuZ292LnVrCiAgICBjb21tYW5kczoKICAgICAgLSBjZCBrdWJlLXB0dGctcG9zdGdyZXMKICAgICAgLSAuL2RlcGxveS5zaAogICAgd2hlbjoKICAgICAgZXZlbnQ6IGRlcGxveW1lbnQKICAgICAgZW52aXJvbm1lbnQ6IHByb2QKCnNlcnZpY2VzOgogIGRpbmQ6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEtZGluZAogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgY29tbWFuZDoKICAgICAgLSAiLXMiCiAgICAgIC0gIm92ZXJsYXkiCg.quZwDoxJRzWSGzulKWNRliz-BB1Z4L65rr5yMSrH268